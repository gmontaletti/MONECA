% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/parallel_diagnostics.R
\name{benchmark_parallel_performance}
\alias{benchmark_parallel_performance}
\title{Benchmark Parallel Performance}
\usage{
benchmark_parallel_performance(
  test_scenarios = NULL,
  max_workers = NULL,
  include_memory_analysis = TRUE,
  benchmark_duration_per_test = 60,
  verbose = FALSE
)
}
\arguments{
\item{test_scenarios}{List of test scenarios with different grid sizes and configurations.}

\item{max_workers}{Maximum number of workers to test (default: system cores).}

\item{include_memory_analysis}{Whether to analyze memory usage patterns.}

\item{benchmark_duration_per_test}{Maximum time per test in seconds (default: 60).}

\item{verbose}{Whether to display detailed benchmark progress.}
}
\value{
List containing comprehensive benchmark results:
  \item{scenario_results}{Performance results for each test scenario}
  \item{optimal_configurations}{Recommended parallel configurations}
  \item{speedup_analysis}{Detailed speedup analysis across scenarios}
  \item{efficiency_analysis}{Parallel efficiency metrics}
  \item{scalability_analysis}{How performance scales with core count}
  \item{memory_impact}{Memory usage analysis (if enabled)}
  \item{recommendations}{Specific recommendations for MONECA usage}
  \item{benchmark_summary}{Overall summary of findings}
}
\description{
Comprehensive performance comparison between sequential and parallel execution
across various parameter grid sizes. Tests different scenarios to identify
optimal parallel settings and quantify performance benefits for MONECA
parameter tuning workloads.
}
\details{
This function performs comprehensive benchmarking by:
1. Testing multiple scenarios with different problem sizes
2. Comparing performance across different core counts
3. Measuring actual speedup vs theoretical maximum
4. Analyzing efficiency and scalability patterns
5. Identifying optimal configurations for different use cases

Test scenarios include:
- Small grids (fast iteration)
- Medium grids (typical use case)  
- Large grids (compute-intensive)
- Memory-intensive scenarios
}
\examples{
\dontrun{
# Standard benchmark with default scenarios
benchmark <- benchmark_parallel_performance(verbose = TRUE)
print(benchmark$benchmark_summary)

# Custom scenarios
custom_scenarios <- list(
  small = list(n_combinations = 20, matrix_size = 30),
  large = list(n_combinations = 100, matrix_size = 100)
)
benchmark <- benchmark_parallel_performance(test_scenarios = custom_scenarios)

# Detailed analysis with memory monitoring
benchmark <- benchmark_parallel_performance(
  include_memory_analysis = TRUE,
  benchmark_duration_per_test = 120
)
}

}
