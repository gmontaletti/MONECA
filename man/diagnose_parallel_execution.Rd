% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/parallel_diagnostics.R
\name{diagnose_parallel_execution}
\alias{diagnose_parallel_execution}
\title{Diagnose Parallel Execution}
\usage{
diagnose_parallel_execution(
  n_workers = NULL,
  test_duration_sec = 10,
  include_cpu_monitoring = TRUE,
  verbose = FALSE
)
}
\arguments{
\item{n_workers}{Number of parallel workers to test (default: auto-detect).}

\item{test_duration_sec}{Duration of test computation in seconds (default: 10).}

\item{include_cpu_monitoring}{Whether to monitor CPU usage during test.}

\item{verbose}{Whether to display detailed diagnostic information.}
}
\value{
List containing diagnostic results:
  \item{parallel_active}{Whether parallel processing is actually running}
  \item{workers_detected}{Number of active workers detected}
  \item{cpu_usage_parallel}{CPU usage during parallel execution (if monitored)}
  \item{cpu_usage_sequential}{CPU usage during sequential execution (if monitored)}
  \item{timing_parallel}{Time taken for parallel execution}
  \item{timing_sequential}{Time taken for sequential execution}
  \item{speedup_achieved}{Actual speedup ratio (sequential/parallel)}
  \item{system_info}{System resource information}
  \item{diagnostic_summary}{Human-readable summary of results}
  \item{recommendations}{Actionable recommendations based on results}
}
\description{
Tests whether parallel processing is actually using multiple CPU cores
by running a known computation both sequentially and in parallel,
monitoring system resources during execution, and verifying that
parallel workers are active and functioning.
}
\details{
This function performs several diagnostic tests:
1. **Worker Detection**: Verifies that the specified number of workers are created
2. **Computation Test**: Runs identical computations sequentially and in parallel
3. **CPU Monitoring**: Tracks CPU utilization during execution (if enabled)
4. **Timing Comparison**: Measures actual execution times and calculates speedup
5. **Resource Verification**: Ensures system resources are properly utilized

The test computation involves CPU-intensive matrix operations that can benefit
from parallelization, similar to MONECA's weight matrix computations.
}
\examples{
\dontrun{
# Basic diagnostic test
results <- diagnose_parallel_execution(verbose = TRUE)
print(results$diagnostic_summary)

# Test specific number of workers
results <- diagnose_parallel_execution(n_workers = 4, verbose = TRUE)

# Include CPU monitoring
results <- diagnose_parallel_execution(include_cpu_monitoring = TRUE)
}

}
\seealso{
\code{\link{monitor_system_resources}}, 
\code{\link{benchmark_parallel_performance}}
}
