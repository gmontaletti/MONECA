% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/parallel_diagnostics.R
\name{monitor_system_resources}
\alias{monitor_system_resources}
\title{Monitor System Resources During Parallel Execution}
\usage{
monitor_system_resources(
  monitoring_duration_sec = 30,
  sampling_interval_sec = 1,
  n_workers = NULL,
  include_memory_monitoring = TRUE,
  verbose = FALSE
)
}
\arguments{
\item{monitoring_duration_sec}{Duration to monitor in seconds (default: 30).}

\item{sampling_interval_sec}{Interval between resource samples in seconds (default: 1).}

\item{n_workers}{Number of parallel workers to monitor (default: auto-detect).}

\item{include_memory_monitoring}{Whether to monitor memory usage.}

\item{verbose}{Whether to display real-time monitoring output.}
}
\value{
List containing resource monitoring results:
  \item{cpu_utilization_over_time}{Time series of CPU utilization}
  \item{memory_usage_over_time}{Time series of memory usage (if enabled)}
  \item{peak_cpu_usage}{Maximum CPU usage observed}
  \item{average_cpu_usage}{Average CPU usage during monitoring}
  \item{parallel_worker_activity}{Information about parallel worker processes}
  \item{resource_bottlenecks}{Identified resource constraints}
  \item{monitoring_summary}{Summary of resource utilization}
  \item{optimization_suggestions}{Suggestions for resource optimization}
}
\description{
Provides real-time monitoring of system resources during parallel execution
including CPU core utilization, memory usage, process activity, and worker
thread status. This function helps identify resource bottlenecks and verify
that parallel processing is effectively utilizing available system resources.
}
\details{
This function continuously monitors system resources while running a
parallel workload similar to MONECA's parameter tuning. It tracks:
- CPU usage per core
- Memory consumption
- Process creation and management
- Worker thread activity
- Resource contention indicators

The monitoring helps identify:
- Whether all CPU cores are being utilized
- Memory bandwidth limitations
- Process creation overhead
- Resource contention issues
}
\examples{
\dontrun{
# Monitor system resources for 30 seconds
monitoring <- monitor_system_resources(verbose = TRUE)
print(monitoring$monitoring_summary)

# Quick 10-second monitoring
monitoring <- monitor_system_resources(monitoring_duration_sec = 10)

# Detailed monitoring with memory tracking
monitoring <- monitor_system_resources(
  monitoring_duration_sec = 60,
  include_memory_monitoring = TRUE,
  verbose = TRUE
)
}

}
